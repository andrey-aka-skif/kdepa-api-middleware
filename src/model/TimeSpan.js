/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeSpan model module.
 * @module model/TimeSpan
 * @version 0.1.0
 */
class TimeSpan {
    /**
     * Constructs a new <code>TimeSpan</code>.
     * @alias module:model/TimeSpan
     */
    constructor() { 
        
        TimeSpan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSpan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSpan} obj Optional instance to populate.
     * @return {module:model/TimeSpan} The populated <code>TimeSpan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSpan();

            if (data.hasOwnProperty('ticks')) {
                obj['ticks'] = ApiClient.convertToType(data['ticks'], 'Number');
            }
            if (data.hasOwnProperty('days')) {
                obj['days'] = ApiClient.convertToType(data['days'], 'Number');
            }
            if (data.hasOwnProperty('hours')) {
                obj['hours'] = ApiClient.convertToType(data['hours'], 'Number');
            }
            if (data.hasOwnProperty('milliseconds')) {
                obj['milliseconds'] = ApiClient.convertToType(data['milliseconds'], 'Number');
            }
            if (data.hasOwnProperty('microseconds')) {
                obj['microseconds'] = ApiClient.convertToType(data['microseconds'], 'Number');
            }
            if (data.hasOwnProperty('nanoseconds')) {
                obj['nanoseconds'] = ApiClient.convertToType(data['nanoseconds'], 'Number');
            }
            if (data.hasOwnProperty('minutes')) {
                obj['minutes'] = ApiClient.convertToType(data['minutes'], 'Number');
            }
            if (data.hasOwnProperty('seconds')) {
                obj['seconds'] = ApiClient.convertToType(data['seconds'], 'Number');
            }
            if (data.hasOwnProperty('totalDays')) {
                obj['totalDays'] = ApiClient.convertToType(data['totalDays'], 'Number');
            }
            if (data.hasOwnProperty('totalHours')) {
                obj['totalHours'] = ApiClient.convertToType(data['totalHours'], 'Number');
            }
            if (data.hasOwnProperty('totalMilliseconds')) {
                obj['totalMilliseconds'] = ApiClient.convertToType(data['totalMilliseconds'], 'Number');
            }
            if (data.hasOwnProperty('totalMicroseconds')) {
                obj['totalMicroseconds'] = ApiClient.convertToType(data['totalMicroseconds'], 'Number');
            }
            if (data.hasOwnProperty('totalNanoseconds')) {
                obj['totalNanoseconds'] = ApiClient.convertToType(data['totalNanoseconds'], 'Number');
            }
            if (data.hasOwnProperty('totalMinutes')) {
                obj['totalMinutes'] = ApiClient.convertToType(data['totalMinutes'], 'Number');
            }
            if (data.hasOwnProperty('totalSeconds')) {
                obj['totalSeconds'] = ApiClient.convertToType(data['totalSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSpan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSpan</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Number} ticks
 */
TimeSpan.prototype['ticks'] = undefined;

/**
 * @member {Number} days
 */
TimeSpan.prototype['days'] = undefined;

/**
 * @member {Number} hours
 */
TimeSpan.prototype['hours'] = undefined;

/**
 * @member {Number} milliseconds
 */
TimeSpan.prototype['milliseconds'] = undefined;

/**
 * @member {Number} microseconds
 */
TimeSpan.prototype['microseconds'] = undefined;

/**
 * @member {Number} nanoseconds
 */
TimeSpan.prototype['nanoseconds'] = undefined;

/**
 * @member {Number} minutes
 */
TimeSpan.prototype['minutes'] = undefined;

/**
 * @member {Number} seconds
 */
TimeSpan.prototype['seconds'] = undefined;

/**
 * @member {Number} totalDays
 */
TimeSpan.prototype['totalDays'] = undefined;

/**
 * @member {Number} totalHours
 */
TimeSpan.prototype['totalHours'] = undefined;

/**
 * @member {Number} totalMilliseconds
 */
TimeSpan.prototype['totalMilliseconds'] = undefined;

/**
 * @member {Number} totalMicroseconds
 */
TimeSpan.prototype['totalMicroseconds'] = undefined;

/**
 * @member {Number} totalNanoseconds
 */
TimeSpan.prototype['totalNanoseconds'] = undefined;

/**
 * @member {Number} totalMinutes
 */
TimeSpan.prototype['totalMinutes'] = undefined;

/**
 * @member {Number} totalSeconds
 */
TimeSpan.prototype['totalSeconds'] = undefined;






export default TimeSpan;

