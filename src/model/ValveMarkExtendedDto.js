/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EquipmentGroupDto from './EquipmentGroupDto';
import SafetyClassDto from './SafetyClassDto';
import SeismicCategoryDto from './SeismicCategoryDto';
import UsingClassDto from './UsingClassDto';
import ValveTypeDto from './ValveTypeDto';

/**
 * The ValveMarkExtendedDto model module.
 * @module model/ValveMarkExtendedDto
 * @version 0.1.0
 */
class ValveMarkExtendedDto {
    /**
     * Constructs a new <code>ValveMarkExtendedDto</code>.
     * @alias module:model/ValveMarkExtendedDto
     */
    constructor() { 
        
        ValveMarkExtendedDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValveMarkExtendedDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValveMarkExtendedDto} obj Optional instance to populate.
     * @return {module:model/ValveMarkExtendedDto} The populated <code>ValveMarkExtendedDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValveMarkExtendedDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('valveTypeId')) {
                obj['valveTypeId'] = ApiClient.convertToType(data['valveTypeId'], 'Number');
            }
            if (data.hasOwnProperty('valveType')) {
                obj['valveType'] = ApiClient.convertToType(data['valveType'], 'String');
            }
            if (data.hasOwnProperty('valveTypes')) {
                obj['valveTypes'] = ApiClient.convertToType(data['valveTypes'], [ValveTypeDto]);
            }
            if (data.hasOwnProperty('dn')) {
                obj['dn'] = ApiClient.convertToType(data['dn'], 'Number');
            }
            if (data.hasOwnProperty('pn')) {
                obj['pn'] = ApiClient.convertToType(data['pn'], 'Number');
            }
            if (data.hasOwnProperty('tn')) {
                obj['tn'] = ApiClient.convertToType(data['tn'], 'Number');
            }
            if (data.hasOwnProperty('openTime')) {
                obj['openTime'] = ApiClient.convertToType(data['openTime'], 'Number');
            }
            if (data.hasOwnProperty('closeTime')) {
                obj['closeTime'] = ApiClient.convertToType(data['closeTime'], 'Number');
            }
            if (data.hasOwnProperty('modification')) {
                obj['modification'] = ApiClient.convertToType(data['modification'], 'String');
            }
            if (data.hasOwnProperty('serviceLife')) {
                obj['serviceLife'] = ApiClient.convertToType(data['serviceLife'], 'Number');
            }
            if (data.hasOwnProperty('assignedResource')) {
                obj['assignedResource'] = ApiClient.convertToType(data['assignedResource'], 'Number');
            }
            if (data.hasOwnProperty('timeToFailure')) {
                obj['timeToFailure'] = ApiClient.convertToType(data['timeToFailure'], 'Number');
            }
            if (data.hasOwnProperty('probabilityOfFailure')) {
                obj['probabilityOfFailure'] = ApiClient.convertToType(data['probabilityOfFailure'], 'Number');
            }
            if (data.hasOwnProperty('technicalUseCoeff')) {
                obj['technicalUseCoeff'] = ApiClient.convertToType(data['technicalUseCoeff'], 'Number');
            }
            if (data.hasOwnProperty('availabilityFactor')) {
                obj['availabilityFactor'] = ApiClient.convertToType(data['availabilityFactor'], 'Number');
            }
            if (data.hasOwnProperty('safetyClassId')) {
                obj['safetyClassId'] = ApiClient.convertToType(data['safetyClassId'], 'Number');
            }
            if (data.hasOwnProperty('safetyClass')) {
                obj['safetyClass'] = ApiClient.convertToType(data['safetyClass'], 'String');
            }
            if (data.hasOwnProperty('safetyClasses')) {
                obj['safetyClasses'] = ApiClient.convertToType(data['safetyClasses'], [SafetyClassDto]);
            }
            if (data.hasOwnProperty('equipmentGroupId')) {
                obj['equipmentGroupId'] = ApiClient.convertToType(data['equipmentGroupId'], 'Number');
            }
            if (data.hasOwnProperty('equipmentGroup')) {
                obj['equipmentGroup'] = ApiClient.convertToType(data['equipmentGroup'], 'String');
            }
            if (data.hasOwnProperty('equipmentGroups')) {
                obj['equipmentGroups'] = ApiClient.convertToType(data['equipmentGroups'], [EquipmentGroupDto]);
            }
            if (data.hasOwnProperty('seismicCategoryId')) {
                obj['seismicCategoryId'] = ApiClient.convertToType(data['seismicCategoryId'], 'Number');
            }
            if (data.hasOwnProperty('seismicCategory')) {
                obj['seismicCategory'] = ApiClient.convertToType(data['seismicCategory'], 'String');
            }
            if (data.hasOwnProperty('seismicCategories')) {
                obj['seismicCategories'] = ApiClient.convertToType(data['seismicCategories'], [SeismicCategoryDto]);
            }
            if (data.hasOwnProperty('usingClassId')) {
                obj['usingClassId'] = ApiClient.convertToType(data['usingClassId'], 'Number');
            }
            if (data.hasOwnProperty('usingClass')) {
                obj['usingClass'] = ApiClient.convertToType(data['usingClass'], 'String');
            }
            if (data.hasOwnProperty('usingClasses')) {
                obj['usingClasses'] = ApiClient.convertToType(data['usingClasses'], [UsingClassDto]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValveMarkExtendedDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValveMarkExtendedDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['valveType'] && !(typeof data['valveType'] === 'string' || data['valveType'] instanceof String)) {
            throw new Error("Expected the field `valveType` to be a primitive type in the JSON string but got " + data['valveType']);
        }
        if (data['valveTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['valveTypes'])) {
                throw new Error("Expected the field `valveTypes` to be an array in the JSON data but got " + data['valveTypes']);
            }
            // validate the optional field `valveTypes` (array)
            for (const item of data['valveTypes']) {
                ValveTypeDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['modification'] && !(typeof data['modification'] === 'string' || data['modification'] instanceof String)) {
            throw new Error("Expected the field `modification` to be a primitive type in the JSON string but got " + data['modification']);
        }
        // ensure the json data is a string
        if (data['safetyClass'] && !(typeof data['safetyClass'] === 'string' || data['safetyClass'] instanceof String)) {
            throw new Error("Expected the field `safetyClass` to be a primitive type in the JSON string but got " + data['safetyClass']);
        }
        if (data['safetyClasses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['safetyClasses'])) {
                throw new Error("Expected the field `safetyClasses` to be an array in the JSON data but got " + data['safetyClasses']);
            }
            // validate the optional field `safetyClasses` (array)
            for (const item of data['safetyClasses']) {
                SafetyClassDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['equipmentGroup'] && !(typeof data['equipmentGroup'] === 'string' || data['equipmentGroup'] instanceof String)) {
            throw new Error("Expected the field `equipmentGroup` to be a primitive type in the JSON string but got " + data['equipmentGroup']);
        }
        if (data['equipmentGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['equipmentGroups'])) {
                throw new Error("Expected the field `equipmentGroups` to be an array in the JSON data but got " + data['equipmentGroups']);
            }
            // validate the optional field `equipmentGroups` (array)
            for (const item of data['equipmentGroups']) {
                EquipmentGroupDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['seismicCategory'] && !(typeof data['seismicCategory'] === 'string' || data['seismicCategory'] instanceof String)) {
            throw new Error("Expected the field `seismicCategory` to be a primitive type in the JSON string but got " + data['seismicCategory']);
        }
        if (data['seismicCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seismicCategories'])) {
                throw new Error("Expected the field `seismicCategories` to be an array in the JSON data but got " + data['seismicCategories']);
            }
            // validate the optional field `seismicCategories` (array)
            for (const item of data['seismicCategories']) {
                SeismicCategoryDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['usingClass'] && !(typeof data['usingClass'] === 'string' || data['usingClass'] instanceof String)) {
            throw new Error("Expected the field `usingClass` to be a primitive type in the JSON string but got " + data['usingClass']);
        }
        if (data['usingClasses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['usingClasses'])) {
                throw new Error("Expected the field `usingClasses` to be an array in the JSON data but got " + data['usingClasses']);
            }
            // validate the optional field `usingClasses` (array)
            for (const item of data['usingClasses']) {
                UsingClassDto.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
ValveMarkExtendedDto.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ValveMarkExtendedDto.prototype['name'] = undefined;

/**
 * @member {Number} valveTypeId
 */
ValveMarkExtendedDto.prototype['valveTypeId'] = undefined;

/**
 * @member {String} valveType
 */
ValveMarkExtendedDto.prototype['valveType'] = undefined;

/**
 * @member {Array.<module:model/ValveTypeDto>} valveTypes
 */
ValveMarkExtendedDto.prototype['valveTypes'] = undefined;

/**
 * @member {Number} dn
 */
ValveMarkExtendedDto.prototype['dn'] = undefined;

/**
 * @member {Number} pn
 */
ValveMarkExtendedDto.prototype['pn'] = undefined;

/**
 * @member {Number} tn
 */
ValveMarkExtendedDto.prototype['tn'] = undefined;

/**
 * @member {Number} openTime
 */
ValveMarkExtendedDto.prototype['openTime'] = undefined;

/**
 * @member {Number} closeTime
 */
ValveMarkExtendedDto.prototype['closeTime'] = undefined;

/**
 * @member {String} modification
 */
ValveMarkExtendedDto.prototype['modification'] = undefined;

/**
 * @member {Number} serviceLife
 */
ValveMarkExtendedDto.prototype['serviceLife'] = undefined;

/**
 * @member {Number} assignedResource
 */
ValveMarkExtendedDto.prototype['assignedResource'] = undefined;

/**
 * @member {Number} timeToFailure
 */
ValveMarkExtendedDto.prototype['timeToFailure'] = undefined;

/**
 * @member {Number} probabilityOfFailure
 */
ValveMarkExtendedDto.prototype['probabilityOfFailure'] = undefined;

/**
 * @member {Number} technicalUseCoeff
 */
ValveMarkExtendedDto.prototype['technicalUseCoeff'] = undefined;

/**
 * @member {Number} availabilityFactor
 */
ValveMarkExtendedDto.prototype['availabilityFactor'] = undefined;

/**
 * @member {Number} safetyClassId
 */
ValveMarkExtendedDto.prototype['safetyClassId'] = undefined;

/**
 * @member {String} safetyClass
 */
ValveMarkExtendedDto.prototype['safetyClass'] = undefined;

/**
 * @member {Array.<module:model/SafetyClassDto>} safetyClasses
 */
ValveMarkExtendedDto.prototype['safetyClasses'] = undefined;

/**
 * @member {Number} equipmentGroupId
 */
ValveMarkExtendedDto.prototype['equipmentGroupId'] = undefined;

/**
 * @member {String} equipmentGroup
 */
ValveMarkExtendedDto.prototype['equipmentGroup'] = undefined;

/**
 * @member {Array.<module:model/EquipmentGroupDto>} equipmentGroups
 */
ValveMarkExtendedDto.prototype['equipmentGroups'] = undefined;

/**
 * @member {Number} seismicCategoryId
 */
ValveMarkExtendedDto.prototype['seismicCategoryId'] = undefined;

/**
 * @member {String} seismicCategory
 */
ValveMarkExtendedDto.prototype['seismicCategory'] = undefined;

/**
 * @member {Array.<module:model/SeismicCategoryDto>} seismicCategories
 */
ValveMarkExtendedDto.prototype['seismicCategories'] = undefined;

/**
 * @member {Number} usingClassId
 */
ValveMarkExtendedDto.prototype['usingClassId'] = undefined;

/**
 * @member {String} usingClass
 */
ValveMarkExtendedDto.prototype['usingClass'] = undefined;

/**
 * @member {Array.<module:model/UsingClassDto>} usingClasses
 */
ValveMarkExtendedDto.prototype['usingClasses'] = undefined;






export default ValveMarkExtendedDto;

