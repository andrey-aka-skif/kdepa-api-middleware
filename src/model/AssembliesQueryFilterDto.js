/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssembliesQueryFilterDto model module.
 * @module model/AssembliesQueryFilterDto
 * @version 0.1.0
 */
class AssembliesQueryFilterDto {
    /**
     * Constructs a new <code>AssembliesQueryFilterDto</code>.
     * @alias module:model/AssembliesQueryFilterDto
     */
    constructor() { 
        
        AssembliesQueryFilterDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssembliesQueryFilterDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssembliesQueryFilterDto} obj Optional instance to populate.
     * @return {module:model/AssembliesQueryFilterDto} The populated <code>AssembliesQueryFilterDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssembliesQueryFilterDto();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['Number']);
            }
            if (data.hasOwnProperty('positionIds')) {
                obj['positionIds'] = ApiClient.convertToType(data['positionIds'], ['Number']);
            }
            if (data.hasOwnProperty('valveIds')) {
                obj['valveIds'] = ApiClient.convertToType(data['valveIds'], ['Number']);
            }
            if (data.hasOwnProperty('driveIds')) {
                obj['driveIds'] = ApiClient.convertToType(data['driveIds'], ['Number']);
            }
            if (data.hasOwnProperty('motorIds')) {
                obj['motorIds'] = ApiClient.convertToType(data['motorIds'], ['Number']);
            }
            if (data.hasOwnProperty('dateFrom')) {
                obj['dateFrom'] = ApiClient.convertToType(data['dateFrom'], 'Date');
            }
            if (data.hasOwnProperty('dateTo')) {
                obj['dateTo'] = ApiClient.convertToType(data['dateTo'], 'Date');
            }
            if (data.hasOwnProperty('openTime')) {
                obj['openTime'] = ApiClient.convertToType(data['openTime'], 'Number');
            }
            if (data.hasOwnProperty('closeTime')) {
                obj['closeTime'] = ApiClient.convertToType(data['closeTime'], 'Number');
            }
            if (data.hasOwnProperty('isFastActing')) {
                obj['isFastActing'] = ApiClient.convertToType(data['isFastActing'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssembliesQueryFilterDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssembliesQueryFilterDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['ids'])) {
            throw new Error("Expected the field `ids` to be an array in the JSON data but got " + data['ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['positionIds'])) {
            throw new Error("Expected the field `positionIds` to be an array in the JSON data but got " + data['positionIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['valveIds'])) {
            throw new Error("Expected the field `valveIds` to be an array in the JSON data but got " + data['valveIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['driveIds'])) {
            throw new Error("Expected the field `driveIds` to be an array in the JSON data but got " + data['driveIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['motorIds'])) {
            throw new Error("Expected the field `motorIds` to be an array in the JSON data but got " + data['motorIds']);
        }

        return true;
    }


}



/**
 * @member {Array.<Number>} ids
 */
AssembliesQueryFilterDto.prototype['ids'] = undefined;

/**
 * @member {Array.<Number>} positionIds
 */
AssembliesQueryFilterDto.prototype['positionIds'] = undefined;

/**
 * @member {Array.<Number>} valveIds
 */
AssembliesQueryFilterDto.prototype['valveIds'] = undefined;

/**
 * @member {Array.<Number>} driveIds
 */
AssembliesQueryFilterDto.prototype['driveIds'] = undefined;

/**
 * @member {Array.<Number>} motorIds
 */
AssembliesQueryFilterDto.prototype['motorIds'] = undefined;

/**
 * @member {Date} dateFrom
 */
AssembliesQueryFilterDto.prototype['dateFrom'] = undefined;

/**
 * @member {Date} dateTo
 */
AssembliesQueryFilterDto.prototype['dateTo'] = undefined;

/**
 * @member {Number} openTime
 */
AssembliesQueryFilterDto.prototype['openTime'] = undefined;

/**
 * @member {Number} closeTime
 */
AssembliesQueryFilterDto.prototype['closeTime'] = undefined;

/**
 * @member {Boolean} isFastActing
 */
AssembliesQueryFilterDto.prototype['isFastActing'] = undefined;






export default AssembliesQueryFilterDto;

