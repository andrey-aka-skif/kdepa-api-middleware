/**
 * КДЭПА CRUD
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import Station from '../model/Station';
import StationPaginatedItemsViewModel from '../model/StationPaginatedItemsViewModel';

/**
* Stations service.
* @module api/StationsApi
* @version v0.1
*/
export default class StationsApi {

    /**
    * Constructs a new StationsApi. 
    * @alias module:api/StationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiVversionStationsDefaultGet operation.
     * @callback module:api/StationsApi~apiVversionStationsDefaultGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Station} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить Станции по умолчанию
     * @param {String} version 
     * @param {module:api/StationsApi~apiVversionStationsDefaultGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Station}
     */
    apiVversionStationsDefaultGet(version, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiVversionStationsDefaultGet");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Station;
      return this.apiClient.callApi(
        '/api/v{version}/Stations/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVversionStationsGet operation.
     * @callback module:api/StationsApi~apiVversionStationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StationPaginatedItemsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить пагинированный списка Станций
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 10)] 
     * @param {Number} [pageIndex = 0)] 
     * @param {Array.<Number>} [ids] 
     * @param {module:api/StationsApi~apiVversionStationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StationPaginatedItemsViewModel}
     */
    apiVversionStationsGet(version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiVversionStationsGet");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageIndex': opts['pageIndex'],
        'Ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = StationPaginatedItemsViewModel;
      return this.apiClient.callApi(
        '/api/v{version}/Stations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVversionStationsIdDelete operation.
     * @callback module:api/StationsApi~apiVversionStationsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удалить Станцию
     * @param {Number} id 
     * @param {String} version 
     * @param {module:api/StationsApi~apiVversionStationsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiVversionStationsIdDelete(id, version, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiVversionStationsIdDelete");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiVversionStationsIdDelete");
      }

      let pathParams = {
        'id': id,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v{version}/Stations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVversionStationsIdGet operation.
     * @callback module:api/StationsApi~apiVversionStationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Station} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить Станции по id
     * @param {Number} id 
     * @param {String} version 
     * @param {module:api/StationsApi~apiVversionStationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Station}
     */
    apiVversionStationsIdGet(id, version, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiVversionStationsIdGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiVversionStationsIdGet");
      }

      let pathParams = {
        'id': id,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Station;
      return this.apiClient.callApi(
        '/api/v{version}/Stations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVversionStationsPost operation.
     * @callback module:api/StationsApi~apiVversionStationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Station} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создать Станцию
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/Station} [station] 
     * @param {module:api/StationsApi~apiVversionStationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Station}
     */
    apiVversionStationsPost(version, opts, callback) {
      opts = opts || {};
      let postBody = opts['station'];
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiVversionStationsPost");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Station;
      return this.apiClient.callApi(
        '/api/v{version}/Stations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVversionStationsPut operation.
     * @callback module:api/StationsApi~apiVversionStationsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Station} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновить Станцию
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/Station} [station] 
     * @param {module:api/StationsApi~apiVversionStationsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Station}
     */
    apiVversionStationsPut(version, opts, callback) {
      opts = opts || {};
      let postBody = opts['station'];
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiVversionStationsPut");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Station;
      return this.apiClient.callApi(
        '/api/v{version}/Stations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
