/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChartFilterDto from '../model/ChartFilterDto';
import ChartPoint from '../model/ChartPoint';
import ProblemDetails from '../model/ProblemDetails';
import SurveyRawDto from '../model/SurveyRawDto';

/**
* SurveysRaw service.
* @module api/SurveysRawApi
* @version 0.1.0
*/
export default class SurveysRawApi {

    /**
    * Constructs a new SurveysRawApi. 
    * @alias module:api/SurveysRawApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Получить список Сырых Обследований
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SurveyRawDto>} and HTTP response
     */
    surveysRawGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SurveyRawDto];
      return this.apiClient.callApi(
        '/SurveysRaw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить список Сырых Обследований
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SurveyRawDto>}
     */
    surveysRawGet() {
      return this.surveysRawGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить график канала по guid Сырого Обследования и index канала
     * @param {String} guid 
     * @param {Number} index 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChartFilterDto} [chartFilterDto] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ChartPoint>} and HTTP response
     */
    surveysRawGuidChannelsIndexGetWithHttpInfo(guid, index, opts) {
      opts = opts || {};
      let postBody = opts['chartFilterDto'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling surveysRawGuidChannelsIndexGet");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling surveysRawGuidChannelsIndexGet");
      }

      let pathParams = {
        'guid': guid,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ChartPoint];
      return this.apiClient.callApi(
        '/SurveysRaw/{guid}/channels/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить график канала по guid Сырого Обследования и index канала
     * @param {String} guid 
     * @param {Number} index 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChartFilterDto} opts.chartFilterDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ChartPoint>}
     */
    surveysRawGuidChannelsIndexGet(guid, index, opts) {
      return this.surveysRawGuidChannelsIndexGetWithHttpInfo(guid, index, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Удалить Сырое Обследование
     * @param {String} guid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    surveysRawGuidDeleteWithHttpInfo(guid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling surveysRawGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/SurveysRaw/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Удалить Сырое Обследование
     * @param {String} guid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    surveysRawGuidDelete(guid) {
      return this.surveysRawGuidDeleteWithHttpInfo(guid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить Сырое Обследование по GUID
     * @param {String} guid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyRawDto} and HTTP response
     */
    surveysRawGuidGetWithHttpInfo(guid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling surveysRawGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SurveyRawDto;
      return this.apiClient.callApi(
        '/SurveysRaw/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить Сырое Обследование по GUID
     * @param {String} guid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyRawDto}
     */
    surveysRawGuidGet(guid) {
      return this.surveysRawGuidGetWithHttpInfo(guid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Создать Сырое Обследование
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyRawDto} and HTTP response
     */
    surveysRawPostWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SurveyRawDto;
      return this.apiClient.callApi(
        '/SurveysRaw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Создать Сырое Обследование
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyRawDto}
     */
    surveysRawPost() {
      return this.surveysRawPostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
