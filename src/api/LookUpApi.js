/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AtmosphereTypeDto from '../model/AtmosphereTypeDto';
import ClimaticExecutionDto from '../model/ClimaticExecutionDto';
import EquipmentGroupDto from '../model/EquipmentGroupDto';
import MediumDto from '../model/MediumDto';
import SafetyClassDto from '../model/SafetyClassDto';
import SeismicCategoryDto from '../model/SeismicCategoryDto';
import UsingClassDto from '../model/UsingClassDto';

/**
* LookUp service.
* @module api/LookUpApi
* @version 0.1.0
*/
export default class LookUpApi {

    /**
    * Constructs a new LookUpApi. 
    * @alias module:api/LookUpApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Получить Типы атмосферы по ГОСТ 15150
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AtmosphereTypeDto>} and HTTP response
     */
    lookUpAtmosphereTypesGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [AtmosphereTypeDto];
      return this.apiClient.callApi(
        '/LookUp/atmosphere-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить Типы атмосферы по ГОСТ 15150
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AtmosphereTypeDto>}
     */
    lookUpAtmosphereTypesGet() {
      return this.lookUpAtmosphereTypesGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить Климатические исполнения по ГОСТ 15150
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ClimaticExecutionDto>} and HTTP response
     */
    lookUpClimaticExecutionsGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ClimaticExecutionDto];
      return this.apiClient.callApi(
        '/LookUp/climatic-executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить Климатические исполнения по ГОСТ 15150
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ClimaticExecutionDto>}
     */
    lookUpClimaticExecutionsGet() {
      return this.lookUpClimaticExecutionsGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить Группы безопасности по НП-089-15
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/EquipmentGroupDto>} and HTTP response
     */
    lookUpEquipmentGroupsGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [EquipmentGroupDto];
      return this.apiClient.callApi(
        '/LookUp/equipment-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить Группы безопасности по НП-089-15
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/EquipmentGroupDto>}
     */
    lookUpEquipmentGroupsGet() {
      return this.lookUpEquipmentGroupsGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить типы Сред
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MediumDto>} and HTTP response
     */
    lookUpMediumsGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [MediumDto];
      return this.apiClient.callApi(
        '/LookUp/mediums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить типы Сред
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MediumDto>}
     */
    lookUpMediumsGet() {
      return this.lookUpMediumsGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить Классы безопасности по НП-001-15
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SafetyClassDto>} and HTTP response
     */
    lookUpSafetyClassesGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SafetyClassDto];
      return this.apiClient.callApi(
        '/LookUp/safety-classes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить Классы безопасности по НП-001-15
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SafetyClassDto>}
     */
    lookUpSafetyClassesGet() {
      return this.lookUpSafetyClassesGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить Категории сейсмостойкости по НП-031-01
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SeismicCategoryDto>} and HTTP response
     */
    lookUpSeismicCategoriesGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SeismicCategoryDto];
      return this.apiClient.callApi(
        '/LookUp/seismic-categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить Категории сейсмостойкости по НП-031-01
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SeismicCategoryDto>}
     */
    lookUpSeismicCategoriesGet() {
      return this.lookUpSeismicCategoriesGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить Классификации арматуры по назначению и условиям эксплуатации в соответствии с НП-068-05
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UsingClassDto>} and HTTP response
     */
    lookUpUsingClassesGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UsingClassDto];
      return this.apiClient.callApi(
        '/LookUp/using-classes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить Классификации арматуры по назначению и условиям эксплуатации в соответствии с НП-068-05
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UsingClassDto>}
     */
    lookUpUsingClassesGet() {
      return this.lookUpUsingClassesGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
