/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrUpdatePositionRequest from '../model/CreateOrUpdatePositionRequest';
import PositionDto from '../model/PositionDto';
import PositionDtoPositionsQueryFilterDtoPagedItemsDto from '../model/PositionDtoPositionsQueryFilterDtoPagedItemsDto';
import PositionExtendedDto from '../model/PositionExtendedDto';

/**
* Positions service.
* @module api/PositionsApi
* @version 0.1.0
*/
export default class PositionsApi {

    /**
    * Constructs a new PositionsApi. 
    * @alias module:api/PositionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Получить пагинированный список Оперативных Позиций
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 10)] 
     * @param {Number} [pageIndex = 0)] 
     * @param {String} [sortBy] 
     * @param {Boolean} [ascending] 
     * @param {Array.<Number>} [ids] 
     * @param {Array.<Number>} [blockIds] 
     * @param {Array.<Number>} [systemIds] 
     * @param {Array.<Number>} [shopIds] 
     * @param {Array.<Number>} [safetyClassIds] 
     * @param {Array.<Number>} [cabinetIds] 
     * @param {Array.<Number>} [mediumIds] 
     * @param {String} [nameSearchString] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositionDtoPositionsQueryFilterDtoPagedItemsDto} and HTTP response
     */
    positionsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageIndex': opts['pageIndex'],
        'SortBy': opts['sortBy'],
        'Ascending': opts['ascending'],
        'Ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'BlockIds': this.apiClient.buildCollectionParam(opts['blockIds'], 'multi'),
        'SystemIds': this.apiClient.buildCollectionParam(opts['systemIds'], 'multi'),
        'ShopIds': this.apiClient.buildCollectionParam(opts['shopIds'], 'multi'),
        'SafetyClassIds': this.apiClient.buildCollectionParam(opts['safetyClassIds'], 'multi'),
        'CabinetIds': this.apiClient.buildCollectionParam(opts['cabinetIds'], 'multi'),
        'MediumIds': this.apiClient.buildCollectionParam(opts['mediumIds'], 'multi'),
        'NameSearchString': opts['nameSearchString']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PositionDtoPositionsQueryFilterDtoPagedItemsDto;
      return this.apiClient.callApi(
        '/Positions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить пагинированный список Оперативных Позиций
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize  (default to 10)
     * @param {Number} opts.pageIndex  (default to 0)
     * @param {String} opts.sortBy 
     * @param {Boolean} opts.ascending 
     * @param {Array.<Number>} opts.ids 
     * @param {Array.<Number>} opts.blockIds 
     * @param {Array.<Number>} opts.systemIds 
     * @param {Array.<Number>} opts.shopIds 
     * @param {Array.<Number>} opts.safetyClassIds 
     * @param {Array.<Number>} opts.cabinetIds 
     * @param {Array.<Number>} opts.mediumIds 
     * @param {String} opts.nameSearchString 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositionDtoPositionsQueryFilterDtoPagedItemsDto}
     */
    positionsGet(opts) {
      return this.positionsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Удалить Оперативную Позицию
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    positionsIdDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling positionsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Positions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Удалить Оперативную Позицию
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    positionsIdDelete(id) {
      return this.positionsIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить Оперативную позицию по id, включая контент Справочников
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositionExtendedDto} and HTTP response
     */
    positionsIdExtendedGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling positionsIdExtendedGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PositionExtendedDto;
      return this.apiClient.callApi(
        '/Positions/{id}/extended', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить Оперативную позицию по id, включая контент Справочников
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositionExtendedDto}
     */
    positionsIdExtendedGet(id) {
      return this.positionsIdExtendedGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить Оперативную Позицию по id
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositionDto} and HTTP response
     */
    positionsIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling positionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PositionDto;
      return this.apiClient.callApi(
        '/Positions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить Оперативную Позицию по id
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositionDto}
     */
    positionsIdGet(id) {
      return this.positionsIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Обновить Оперативную Позицию
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrUpdatePositionRequest} [createOrUpdatePositionRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositionDto} and HTTP response
     */
    positionsIdPutWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['createOrUpdatePositionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling positionsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PositionDto;
      return this.apiClient.callApi(
        '/Positions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Обновить Оперативную Позицию
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrUpdatePositionRequest} opts.createOrUpdatePositionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositionDto}
     */
    positionsIdPut(id, opts) {
      return this.positionsIdPutWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Создать Оперативную Позицию
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrUpdatePositionRequest} [createOrUpdatePositionRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositionDto} and HTTP response
     */
    positionsPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createOrUpdatePositionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PositionDto;
      return this.apiClient.callApi(
        '/Positions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Создать Оперативную Позицию
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrUpdatePositionRequest} opts.createOrUpdatePositionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositionDto}
     */
    positionsPost(opts) {
      return this.positionsPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
