/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import SurveyProtocolDto from '../model/SurveyProtocolDto';
import UpdateSurveyProtocolRequest from '../model/UpdateSurveyProtocolRequest';

/**
* SurveysProtocols service.
* @module api/SurveysProtocolsApi
* @version 0.1.0
*/
export default class SurveysProtocolsApi {

    /**
    * Constructs a new SurveysProtocolsApi. 
    * @alias module:api/SurveysProtocolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Получить протокол по id
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyProtocolDto} and HTTP response
     */
    surveysProtocolsProtocolsIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling surveysProtocolsProtocolsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SurveyProtocolDto;
      return this.apiClient.callApi(
        '/SurveysProtocols/protocols/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить протокол по id
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyProtocolDto}
     */
    surveysProtocolsProtocolsIdGet(id) {
      return this.surveysProtocolsProtocolsIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить актуальный протокол по id обследования
     * @param {Number} surveyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyProtocolDto} and HTTP response
     */
    surveysProtocolsSurveyIdActualProtocolGetWithHttpInfo(surveyId) {
      let postBody = null;
      // verify the required parameter 'surveyId' is set
      if (surveyId === undefined || surveyId === null) {
        throw new Error("Missing the required parameter 'surveyId' when calling surveysProtocolsSurveyIdActualProtocolGet");
      }

      let pathParams = {
        'surveyId': surveyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SurveyProtocolDto;
      return this.apiClient.callApi(
        '/SurveysProtocols/{surveyId}/actual-protocol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить актуальный протокол по id обследования
     * @param {Number} surveyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyProtocolDto}
     */
    surveysProtocolsSurveyIdActualProtocolGet(surveyId) {
      return this.surveysProtocolsSurveyIdActualProtocolGetWithHttpInfo(surveyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Обновить актуальный протокол обследования по id обследования
     * @param {Number} surveyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSurveyProtocolRequest} [updateSurveyProtocolRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyProtocolDto} and HTTP response
     */
    surveysProtocolsSurveyIdProtocolPutWithHttpInfo(surveyId, opts) {
      opts = opts || {};
      let postBody = opts['updateSurveyProtocolRequest'];
      // verify the required parameter 'surveyId' is set
      if (surveyId === undefined || surveyId === null) {
        throw new Error("Missing the required parameter 'surveyId' when calling surveysProtocolsSurveyIdProtocolPut");
      }

      let pathParams = {
        'surveyId': surveyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SurveyProtocolDto;
      return this.apiClient.callApi(
        '/SurveysProtocols/{surveyId}/protocol', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Обновить актуальный протокол обследования по id обследования
     * @param {Number} surveyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSurveyProtocolRequest} opts.updateSurveyProtocolRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyProtocolDto}
     */
    surveysProtocolsSurveyIdProtocolPut(surveyId, opts) {
      return this.surveysProtocolsSurveyIdProtocolPutWithHttpInfo(surveyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить все протоколы по id обследования
     * @param {Number} surveyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyProtocolDto} and HTTP response
     */
    surveysProtocolsSurveyIdProtocolsGetWithHttpInfo(surveyId) {
      let postBody = null;
      // verify the required parameter 'surveyId' is set
      if (surveyId === undefined || surveyId === null) {
        throw new Error("Missing the required parameter 'surveyId' when calling surveysProtocolsSurveyIdProtocolsGet");
      }

      let pathParams = {
        'surveyId': surveyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SurveyProtocolDto;
      return this.apiClient.callApi(
        '/SurveysProtocols/{surveyId}/protocols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить все протоколы по id обследования
     * @param {Number} surveyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyProtocolDto}
     */
    surveysProtocolsSurveyIdProtocolsGet(surveyId) {
      return this.surveysProtocolsSurveyIdProtocolsGetWithHttpInfo(surveyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
