/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlockDto model module.
 * @module model/BlockDto
 * @version 0.1.0
 */
class BlockDto {
    /**
     * Constructs a new <code>BlockDto</code>.
     * @alias module:model/BlockDto
     */
    constructor() { 
        
        BlockDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlockDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlockDto} obj Optional instance to populate.
     * @return {module:model/BlockDto} The populated <code>BlockDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlockDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('codeType')) {
                obj['codeType'] = ApiClient.convertToType(data['codeType'], 'String');
            }
            if (data.hasOwnProperty('reactor')) {
                obj['reactor'] = ApiClient.convertToType(data['reactor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlockDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlockDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['codeType'] && !(typeof data['codeType'] === 'string' || data['codeType'] instanceof String)) {
            throw new Error("Expected the field `codeType` to be a primitive type in the JSON string but got " + data['codeType']);
        }
        // ensure the json data is a string
        if (data['reactor'] && !(typeof data['reactor'] === 'string' || data['reactor'] instanceof String)) {
            throw new Error("Expected the field `reactor` to be a primitive type in the JSON string but got " + data['reactor']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
BlockDto.prototype['id'] = undefined;

/**
 * @member {Number} number
 */
BlockDto.prototype['number'] = undefined;

/**
 * @member {String} codeType
 */
BlockDto.prototype['codeType'] = undefined;

/**
 * @member {String} reactor
 */
BlockDto.prototype['reactor'] = undefined;






export default BlockDto;

