/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MotorMarkDto model module.
 * @module model/MotorMarkDto
 * @version 0.1.0
 */
class MotorMarkDto {
    /**
     * Constructs a new <code>MotorMarkDto</code>.
     * @alias module:model/MotorMarkDto
     */
    constructor() { 
        
        MotorMarkDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MotorMarkDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MotorMarkDto} obj Optional instance to populate.
     * @return {module:model/MotorMarkDto} The populated <code>MotorMarkDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MotorMarkDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('voltage')) {
                obj['voltage'] = ApiClient.convertToType(data['voltage'], 'Number');
            }
            if (data.hasOwnProperty('currentFrequency')) {
                obj['currentFrequency'] = ApiClient.convertToType(data['currentFrequency'], 'Number');
            }
            if (data.hasOwnProperty('currentStart')) {
                obj['currentStart'] = ApiClient.convertToType(data['currentStart'], 'Number');
            }
            if (data.hasOwnProperty('currentNominal')) {
                obj['currentNominal'] = ApiClient.convertToType(data['currentNominal'], 'Number');
            }
            if (data.hasOwnProperty('cosFi')) {
                obj['cosFi'] = ApiClient.convertToType(data['cosFi'], 'Number');
            }
            if (data.hasOwnProperty('power')) {
                obj['power'] = ApiClient.convertToType(data['power'], 'Number');
            }
            if (data.hasOwnProperty('torque')) {
                obj['torque'] = ApiClient.convertToType(data['torque'], 'Number');
            }
            if (data.hasOwnProperty('resistanceU')) {
                obj['resistanceU'] = ApiClient.convertToType(data['resistanceU'], 'Number');
            }
            if (data.hasOwnProperty('resistanceV')) {
                obj['resistanceV'] = ApiClient.convertToType(data['resistanceV'], 'Number');
            }
            if (data.hasOwnProperty('resistanceW')) {
                obj['resistanceW'] = ApiClient.convertToType(data['resistanceW'], 'Number');
            }
            if (data.hasOwnProperty('rotationFrequencyNominal')) {
                obj['rotationFrequencyNominal'] = ApiClient.convertToType(data['rotationFrequencyNominal'], 'Number');
            }
            if (data.hasOwnProperty('techRequierName')) {
                obj['techRequierName'] = ApiClient.convertToType(data['techRequierName'], 'String');
            }
            if (data.hasOwnProperty('currentType')) {
                obj['currentType'] = ApiClient.convertToType(data['currentType'], 'String');
            }
            if (data.hasOwnProperty('angleOfTurn')) {
                obj['angleOfTurn'] = ApiClient.convertToType(data['angleOfTurn'], 'Number');
            }
            if (data.hasOwnProperty('startToNominalCurrentRatio')) {
                obj['startToNominalCurrentRatio'] = ApiClient.convertToType(data['startToNominalCurrentRatio'], 'Number');
            }
            if (data.hasOwnProperty('efficiency')) {
                obj['efficiency'] = ApiClient.convertToType(data['efficiency'], 'Number');
            }
            if (data.hasOwnProperty('windingsTemperatureWork')) {
                obj['windingsTemperatureWork'] = ApiClient.convertToType(data['windingsTemperatureWork'], 'Number');
            }
            if (data.hasOwnProperty('windingsTemperatureMax')) {
                obj['windingsTemperatureMax'] = ApiClient.convertToType(data['windingsTemperatureMax'], 'Number');
            }
            if (data.hasOwnProperty('bearingsTemperatureWork')) {
                obj['bearingsTemperatureWork'] = ApiClient.convertToType(data['bearingsTemperatureWork'], 'Number');
            }
            if (data.hasOwnProperty('bearingsTemperatureMax')) {
                obj['bearingsTemperatureMax'] = ApiClient.convertToType(data['bearingsTemperatureMax'], 'Number');
            }
            if (data.hasOwnProperty('serviceLife')) {
                obj['serviceLife'] = ApiClient.convertToType(data['serviceLife'], 'Number');
            }
            if (data.hasOwnProperty('assignedResource')) {
                obj['assignedResource'] = ApiClient.convertToType(data['assignedResource'], 'Number');
            }
            if (data.hasOwnProperty('timeToFailure')) {
                obj['timeToFailure'] = ApiClient.convertToType(data['timeToFailure'], 'Number');
            }
            if (data.hasOwnProperty('probabilityOfFailure')) {
                obj['probabilityOfFailure'] = ApiClient.convertToType(data['probabilityOfFailure'], 'Number');
            }
            if (data.hasOwnProperty('technicalUseCoeff')) {
                obj['technicalUseCoeff'] = ApiClient.convertToType(data['technicalUseCoeff'], 'Number');
            }
            if (data.hasOwnProperty('availabilityFactor')) {
                obj['availabilityFactor'] = ApiClient.convertToType(data['availabilityFactor'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MotorMarkDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MotorMarkDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['techRequierName'] && !(typeof data['techRequierName'] === 'string' || data['techRequierName'] instanceof String)) {
            throw new Error("Expected the field `techRequierName` to be a primitive type in the JSON string but got " + data['techRequierName']);
        }
        // ensure the json data is a string
        if (data['currentType'] && !(typeof data['currentType'] === 'string' || data['currentType'] instanceof String)) {
            throw new Error("Expected the field `currentType` to be a primitive type in the JSON string but got " + data['currentType']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
MotorMarkDto.prototype['id'] = undefined;

/**
 * @member {String} name
 */
MotorMarkDto.prototype['name'] = undefined;

/**
 * @member {Number} voltage
 */
MotorMarkDto.prototype['voltage'] = undefined;

/**
 * @member {Number} currentFrequency
 */
MotorMarkDto.prototype['currentFrequency'] = undefined;

/**
 * @member {Number} currentStart
 */
MotorMarkDto.prototype['currentStart'] = undefined;

/**
 * @member {Number} currentNominal
 */
MotorMarkDto.prototype['currentNominal'] = undefined;

/**
 * @member {Number} cosFi
 */
MotorMarkDto.prototype['cosFi'] = undefined;

/**
 * @member {Number} power
 */
MotorMarkDto.prototype['power'] = undefined;

/**
 * @member {Number} torque
 */
MotorMarkDto.prototype['torque'] = undefined;

/**
 * @member {Number} resistanceU
 */
MotorMarkDto.prototype['resistanceU'] = undefined;

/**
 * @member {Number} resistanceV
 */
MotorMarkDto.prototype['resistanceV'] = undefined;

/**
 * @member {Number} resistanceW
 */
MotorMarkDto.prototype['resistanceW'] = undefined;

/**
 * @member {Number} rotationFrequencyNominal
 */
MotorMarkDto.prototype['rotationFrequencyNominal'] = undefined;

/**
 * @member {String} techRequierName
 */
MotorMarkDto.prototype['techRequierName'] = undefined;

/**
 * @member {String} currentType
 */
MotorMarkDto.prototype['currentType'] = undefined;

/**
 * @member {Number} angleOfTurn
 */
MotorMarkDto.prototype['angleOfTurn'] = undefined;

/**
 * @member {Number} startToNominalCurrentRatio
 */
MotorMarkDto.prototype['startToNominalCurrentRatio'] = undefined;

/**
 * @member {Number} efficiency
 */
MotorMarkDto.prototype['efficiency'] = undefined;

/**
 * @member {Number} windingsTemperatureWork
 */
MotorMarkDto.prototype['windingsTemperatureWork'] = undefined;

/**
 * @member {Number} windingsTemperatureMax
 */
MotorMarkDto.prototype['windingsTemperatureMax'] = undefined;

/**
 * @member {Number} bearingsTemperatureWork
 */
MotorMarkDto.prototype['bearingsTemperatureWork'] = undefined;

/**
 * @member {Number} bearingsTemperatureMax
 */
MotorMarkDto.prototype['bearingsTemperatureMax'] = undefined;

/**
 * @member {Number} serviceLife
 */
MotorMarkDto.prototype['serviceLife'] = undefined;

/**
 * @member {Number} assignedResource
 */
MotorMarkDto.prototype['assignedResource'] = undefined;

/**
 * @member {Number} timeToFailure
 */
MotorMarkDto.prototype['timeToFailure'] = undefined;

/**
 * @member {Number} probabilityOfFailure
 */
MotorMarkDto.prototype['probabilityOfFailure'] = undefined;

/**
 * @member {Number} technicalUseCoeff
 */
MotorMarkDto.prototype['technicalUseCoeff'] = undefined;

/**
 * @member {Number} availabilityFactor
 */
MotorMarkDto.prototype['availabilityFactor'] = undefined;






export default MotorMarkDto;

