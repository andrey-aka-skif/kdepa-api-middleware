/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValvesQueryFilterDto model module.
 * @module model/ValvesQueryFilterDto
 * @version 0.1.0
 */
class ValvesQueryFilterDto {
    /**
     * Constructs a new <code>ValvesQueryFilterDto</code>.
     * @alias module:model/ValvesQueryFilterDto
     */
    constructor() { 
        
        ValvesQueryFilterDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValvesQueryFilterDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValvesQueryFilterDto} obj Optional instance to populate.
     * @return {module:model/ValvesQueryFilterDto} The populated <code>ValvesQueryFilterDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValvesQueryFilterDto();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['Number']);
            }
            if (data.hasOwnProperty('markIds')) {
                obj['markIds'] = ApiClient.convertToType(data['markIds'], ['Number']);
            }
            if (data.hasOwnProperty('factoryIds')) {
                obj['factoryIds'] = ApiClient.convertToType(data['factoryIds'], ['Number']);
            }
            if (data.hasOwnProperty('serialNumberSearchString')) {
                obj['serialNumberSearchString'] = ApiClient.convertToType(data['serialNumberSearchString'], 'String');
            }
            if (data.hasOwnProperty('madeDateFrom')) {
                obj['madeDateFrom'] = ApiClient.convertToType(data['madeDateFrom'], 'Date');
            }
            if (data.hasOwnProperty('madeDateTo')) {
                obj['madeDateTo'] = ApiClient.convertToType(data['madeDateTo'], 'Date');
            }
            if (data.hasOwnProperty('inUseDateFrom')) {
                obj['inUseDateFrom'] = ApiClient.convertToType(data['inUseDateFrom'], 'Date');
            }
            if (data.hasOwnProperty('inUseDateTo')) {
                obj['inUseDateTo'] = ApiClient.convertToType(data['inUseDateTo'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValvesQueryFilterDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValvesQueryFilterDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['ids'])) {
            throw new Error("Expected the field `ids` to be an array in the JSON data but got " + data['ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['markIds'])) {
            throw new Error("Expected the field `markIds` to be an array in the JSON data but got " + data['markIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['factoryIds'])) {
            throw new Error("Expected the field `factoryIds` to be an array in the JSON data but got " + data['factoryIds']);
        }
        // ensure the json data is a string
        if (data['serialNumberSearchString'] && !(typeof data['serialNumberSearchString'] === 'string' || data['serialNumberSearchString'] instanceof String)) {
            throw new Error("Expected the field `serialNumberSearchString` to be a primitive type in the JSON string but got " + data['serialNumberSearchString']);
        }

        return true;
    }


}



/**
 * @member {Array.<Number>} ids
 */
ValvesQueryFilterDto.prototype['ids'] = undefined;

/**
 * @member {Array.<Number>} markIds
 */
ValvesQueryFilterDto.prototype['markIds'] = undefined;

/**
 * @member {Array.<Number>} factoryIds
 */
ValvesQueryFilterDto.prototype['factoryIds'] = undefined;

/**
 * @member {String} serialNumberSearchString
 */
ValvesQueryFilterDto.prototype['serialNumberSearchString'] = undefined;

/**
 * @member {Date} madeDateFrom
 */
ValvesQueryFilterDto.prototype['madeDateFrom'] = undefined;

/**
 * @member {Date} madeDateTo
 */
ValvesQueryFilterDto.prototype['madeDateTo'] = undefined;

/**
 * @member {Date} inUseDateFrom
 */
ValvesQueryFilterDto.prototype['inUseDateFrom'] = undefined;

/**
 * @member {Date} inUseDateTo
 */
ValvesQueryFilterDto.prototype['inUseDateTo'] = undefined;






export default ValvesQueryFilterDto;

