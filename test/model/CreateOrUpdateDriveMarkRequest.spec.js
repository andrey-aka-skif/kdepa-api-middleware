/**
 * kdepa-api
 * КДЭПА CRUD API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KdepaApi);
  }
}(this, function(expect, KdepaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateOrUpdateDriveMarkRequest', function() {
    it('should create an instance of CreateOrUpdateDriveMarkRequest', function() {
      // uncomment below and update the code to test CreateOrUpdateDriveMarkRequest
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be.a(KdepaApi.CreateOrUpdateDriveMarkRequest);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property gearRatio (base name: "gearRatio")', function() {
      // uncomment below and update the code to test the property gearRatio
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property torque (base name: "torque")', function() {
      // uncomment below and update the code to test the property torque
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property rotationFrequency (base name: "rotationFrequency")', function() {
      // uncomment below and update the code to test the property rotationFrequency
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property efficiency (base name: "efficiency")', function() {
      // uncomment below and update the code to test the property efficiency
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property modification (base name: "modification")', function() {
      // uncomment below and update the code to test the property modification
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property turnNumberMin (base name: "turnNumberMin")', function() {
      // uncomment below and update the code to test the property turnNumberMin
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property turnNumberMax (base name: "turnNumberMax")', function() {
      // uncomment below and update the code to test the property turnNumberMax
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property movementTimeMin (base name: "movementTimeMin")', function() {
      // uncomment below and update the code to test the property movementTimeMin
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property movementTimeMax (base name: "movementTimeMax")', function() {
      // uncomment below and update the code to test the property movementTimeMax
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property serviceLife (base name: "serviceLife")', function() {
      // uncomment below and update the code to test the property serviceLife
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property assignedResource (base name: "assignedResource")', function() {
      // uncomment below and update the code to test the property assignedResource
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property timeToFailure (base name: "timeToFailure")', function() {
      // uncomment below and update the code to test the property timeToFailure
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property probabilityOfFailure (base name: "probabilityOfFailure")', function() {
      // uncomment below and update the code to test the property probabilityOfFailure
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property technicalUseCoeff (base name: "technicalUseCoeff")', function() {
      // uncomment below and update the code to test the property technicalUseCoeff
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

    it('should have the property availabilityFactor (base name: "availabilityFactor")', function() {
      // uncomment below and update the code to test the property availabilityFactor
      //var instance = new KdepaApi.CreateOrUpdateDriveMarkRequest();
      //expect(instance).to.be();
    });

  });

}));
